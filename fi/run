#!/bin/sh -e
shopt -s nullglob

fi=`dirname $0`
. $fi/env
gitrev=$(git describe --always)
os=$( . /etc/os-release ; echo $ID${VERSION_ID%.[0-9]*} )
arch=$(uname -m)
nixargs="$fi --argstr gitrev ${gitrev:-unknown} --argstr os $os"
site=fi
lmodbase=/mnt/sw/lmod/$arch/$os

if [[ `hostname -s` = pcn* ]] ; then
	# popeye
	site=popeye
	nixargs="$nixargs --argstr target skylake-avx512 --argstr cudaarch 70,80"
fi

traceSpecs() {
	nix-instantiate --eval -A "$1" $nixargs |& sed 's/^trace: //'
}

if [[ $# -eq 0 ]] ; then
	cmd=help
else
	cmd="$1"
	shift
fi
case "$cmd" in
	(build)
		if [[ "$*" != *" -A "* ]] ; then
			set -- "$@" -A mods
		fi
		exec nix-build --show-trace "$@" $nixargs
		;;
	(spec)
		if [[ $# -eq 0 ]] ; then
			traceSpecs traceModSpecs
		else
			for p in "$@" ; do
				traceSpecs "traceSpecs.$p"
			done
		fi
		;;
	(gc)
		exec nix-store --gc
		;;
	(profile)
		if [[ $# -eq 0 ]] ; then
			echo "Nothing to do"
		elif [[ $* == all ]] ; then
			set -- nix lmod jupyter shell
		fi
		for prof in "$@" ; do
			prefix=
			case "$prof" in
				(nix)
					attrs="nixpkgs.nix nixpkgs.git"
					prefix=$arch/
					;;
				(lmod)
					attrs="pkgs.lmod"
					;;
				(jupyter*)
					attrs="jupyter"
					;;
				(slurm)
					attrs="pkgs.cuda pkgs.pmix pkgs.oneapi-level-zero"
					;;
				(pyslurm)
					attrs="pyslurm"
					;;
				(shell)
					attrs="pkgs.zsh pkgs.tmux pkgs.git"
					;;
				(viswall)
					attrs="nixpkgs.xscreensaver nixpkgs.mpv"
					;;
				(*)
					echo "Unknown profile"
					exit 1
					;;
			esac
			profile=$NIX_STATE_DIR/profiles/${prefix:=$arch/$os/}$prof
			nix-env -p $profile -i -r -f $nixargs -A $attrs
			l=$(readlink $profile)
			git tag $site/$prefix${l%-link} HEAD || true
		done
		;;
	(modules)
		if [[ $1 == -f ]] ; then
			shift
		elif ! git diff-index --quiet HEAD -- ; then
			echo "Local modifications: refusing to relase (without -f)"
			exit 1
		fi
		if [[ $# -ne 1 ]] ; then
			echo "Usage: modules NAME"
			exit 1
		fi
		path=$1
		if [[ $path != */* ]] ; then
			tag=$path
			path=$lmodbase/modules/modules/$path
		fi
		if [[ $path != *.lua ]] ; then
			path=$path.lua
		fi
		# release
		nix-build -o $path -A modsMod $nixargs
		if [[ -n $tag ]] ; then
			git tag $site/$arch/$os/$tag HEAD
		fi
		;& # fall-thru
	(cache)
		rm -f $lmodbase/cacheDir/spiderT.old.lua*
		$lmodbase/lmod/lmod/libexec/update_lmod_system_cache_files -d $lmodbase/cacheDir -t $lmodbase/cacheTS.txt $lmodbase/modules:$(realpath $lmodbase/lmod/lmod/modulefiles/Core)
		;;
	(spack)
		nix-build -o spackBin -A spackBin $nixargs
		exec ./spackBin "$@"
		;;
	(*)
		if [[ $cmd != help ]] ; then
			echo "Unknown command"
		fi

		cat <<EOF
Usage: $0 COMMAND

Commands:
  
  build        Build modules into result.  Takes the same arguments as
               nix-build (-jN, --cores M, -K, ...).
  spec [PKG]   Print the spec tree for a specific package or all modules,
	       along with the total number of unique packages.
  gc           Cleanup any unreferenced nix stores (nix-store --gc).
  profile      Update a nix profile for...
    jupyter    jupyterhub server environment
    nix        nix build environment
    lmod       lua modules environment
    shell      zsh and other shell tools
    viswall    viswall movie display environment
    all        all of the above
    modules    nixpack lmod modules (for testing only)
  modules NAME release nixpack lmod modules to modules/NAME
  cache        Update lmod cache files
  spack ...    Run a spack command in the nixpack environment (things like list
	       and info work, but those managing packages will not)

EOF
esac
